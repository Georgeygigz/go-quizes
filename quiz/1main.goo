package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
	"strings"
)

func main() {
	var correct int
	var wrong int
	filename := os.Args[1]

	f, err := os.Open(filename)

	if err != nil {
		fmt.Printf("Error opening file %s \n", err)
	}

	defer f.Close()

	lines, err := csv.NewReader(f).ReadAll()
	if err != nil {
		fmt.Printf("Error reading lines %s", err)
	}
	for _, l := range lines {
		var ans string
		fmt.Printf("What is %s \n", l[0])
		fmt.Scanf("%s", &ans)

		out := fmt.Sprintf("%s,%s,%t", l[0], ans, ans == l[1])
		output(strings.Split(out, ","))
		count(ans == l[1], &correct, &wrong)
	}

	fmt.Printf(">>>>>CHALLENGE COMPLETED<<<<<\n Total Questions: %3d\n Correct Answers: %3d\n Wrong Answers: %3d\n", correct+wrong, correct, wrong)

}

func count(ans bool, correct, wrong *int) {
	if ans {
		*correct += 1
	} else {
		*wrong += 1
	}

}

func output(answer []string) {
	filename := "output.csv"
	file, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("Error opening or creating a file %v", err)
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(answer); err != nil {
		log.Fatalf("Error writing to csv %v", err)
	}

	if err := writer.Error(); err != nil {
		log.Fatalf("Error writing to csv %v", err)
	}
}
